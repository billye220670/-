
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>玄天道韵 - 技能融合系统Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: '微软雅黑', sans-serif;
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            min-height: 100vh;
            padding: 20px;
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 15px;
            padding: 20px;
            border: 2px solid #d4af37;
        }

        .header {
            text-align: center;
            color: #d4af37;
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
        }

        .main-content {
            display: grid;
            grid-template-columns: 300px 1fr 250px;
            gap: 20px;
        }

        .skill-inventory {
            background: rgba(20, 20, 20, 0.9);
            border: 1px solid #555;
            border-radius: 10px;
            padding: 15px;
        }

        .inventory-title {
            color: #d4af37;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
        }

        .skill-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
        }

        .skill-item {
            width: 70px;
            height: 70px;
            background: rgba(40, 40, 40, 0.9);
            border: 2px solid #666;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .skill-item:hover {
            border-color: #d4af37;
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(212, 175, 55, 0.5);
        }

        .skill-item.selected {
            border-color: #ff6b6b;
            background: rgba(255, 107, 107, 0.2);
        }

        .skill-icon {
            font-size: 24px;
            margin-bottom: 2px;
        }

        .skill-name {
            font-size: 10px;
            color: #ccc;
            text-align: center;
        }

        .skill-level {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #d4af37;
            color: black;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
        }

        .fusion-area {
            background: rgba(20, 20, 20, 0.9);
            border: 1px solid #555;
            border-radius: 10px;
            padding: 20px;
        }

        .fusion-title {
            color: #d4af37;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
        }

        .fusion-slots {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-bottom: 30px;
        }

        .fusion-slot {
            width: 100px;
            height: 100px;
            border: 3px dashed #666;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(40, 40, 40, 0.5);
            transition: all 0.3s ease;
        }

        .fusion-slot.has-skill {
            border-style: solid;
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.1);
        }

        .fusion-slot.result {
            border-color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
        }

        .plus-icon {
            font-size: 30px;
            color: #d4af37;
            margin: 0 10px;
        }

        .equals-icon {
            font-size: 30px;
            color: #ff6b6b;
            margin: 0 10px;
        }

        .fusion-button {
            display: block;
            width: 150px;
            margin: 0 auto 20px;
            padding: 12px 24px;
            background: linear-gradient(135deg, #d4af37, #f4d03f);
            color: black;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .fusion-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(212, 175, 55, 0.4);
        }

        .fusion-button:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .player-stats {
            background: rgba(20, 20, 20, 0.9);
            border: 1px solid #555;
            border-radius: 10px;
            padding: 15px;
        }

        .stats-title {
            color: #d4af37;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            color: #ccc;
        }

        .stat-value {
            color: #d4af37;
            font-weight: bold;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(40, 40, 40, 0.8);
            border-radius: 4px;
            overflow: hidden;
            margin-top: 5px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #d4af37, #f4d03f);
            transition: width 0.3s ease;
        }

        .message-area {
            margin-top: 20px;
            padding: 15px;
            background: rgba(20, 20, 20, 0.9);
            border: 1px solid #555;
            border-radius: 10px;
            color: #ccc;
            min-height: 60px;
        }

        .message {
            margin-bottom: 5px;
        }

        .message.success {
            color: #4CAF50;
        }

        .message.failure {
            color: #f44336;
        }

        .message.info {
            color: #2196F3;
        }

        .discovery-log {
            margin-top: 20px;
            padding: 15px;
            background: rgba(20, 20, 20, 0.9);
            border: 1px solid #555;
            border-radius: 10px;
        }

        .log-title {
            color: #d4af37;
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .log-item {
            color: #ccc;
            font-size: 12px;
            margin-bottom: 3px;
        }

        @keyframes glow {
            0% { box-shadow: 0 0 5px rgba(212, 175, 55, 0.5); }
            50% { box-shadow: 0 0 20px rgba(212, 175, 55, 0.8); }
            100% { box-shadow: 0 0 5px rgba(212, 175, 55, 0.5); }
        }

        .fusion-animation {
            animation: glow 1s ease-in-out infinite;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">🗡️ 玄天道韵 - 技能融合系统 ⚔️</div>
        
        <div class="main-content">
            <!-- 技能库存 -->
            <div class="skill-inventory">
                <div class="inventory-title">技能库存</div>
                <div class="skill-grid" id="skillGrid">
                    <!-- 技能会动态生成 -->
                </div>
            </div>

            <!-- 融合区域 -->
            <div class="fusion-area">
                <div class="fusion-title">技能融合炉</div>
                <div class="fusion-slots">
                    <div class="fusion-slot" id="slot1" onclick="clearSlot(1)">
                        <div>拖拽技能至此</div>
                    </div>
                    <div class="plus-icon">+</div>
                    <div class="fusion-slot" id="slot2" onclick="clearSlot(2)">
                        <div>拖拽技能至此</div>
                    </div>
                    <div class="equals-icon">=</div>
                    <div class="fusion-slot result" id="resultSlot">
                        <div>融合结果</div>
                    </div>
                </div>
                <button class="fusion-button" id="fuseButton" onclick="attemptFusion()" disabled>开始融合</button>
                
                <div class="message-area" id="messageArea">
                    <div class="message info">选择两个技能开始融合实验...</div>
                </div>
            </div>

            <!-- 玩家状态 -->
            <div class="player-stats">
                <div class="stats-title">修炼状态</div>
                <div class="stat-item">
                    <span>境界:</span>
                    <span class="stat-value" id="realm">筑基期</span>
                </div>
                <div class="stat-item">
                    <span>修为:</span>
                    <span class="stat-value" id="experience">1250/2000</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="expBar" style="width: 62.5%;"></div>
                </div>
                <div class="stat-item">
                    <span>悟性:</span>
                    <span class="stat-value" id="comprehension">75</span>
                </div>
                <div class="stat-item">
                    <span>成功率:</span>
                    <span class="stat-value" id="successRate">--</span>
                </div>
            </div>
        </div>

        <!-- 发现日志 -->
        <div class="discovery-log">
            <div class="log-title">融合发现日志</div>
            <div id="discoveryLog">
                <div class="log-item">等待你的第一次发现...</div>
            </div>
        </div>
    </div>

    <script>
        // 游戏数据
        const gameState = {
            experience: 1250,
            maxExperience: 2000,
            realm: "筑基期",
            comprehension: 75,
            selectedSkills: [null, null],
            discoveredRecipes: [],
            skills: [
                { id: 1, name: "基础剑法", icon: "⚔️", level: 3, type: "sword" },
                { id: 2, name: "太极心法", icon: "☯️", level: 2, type: "internal" },
                { id: 3, name: "轻功", icon: "🕊️", level: 4, type: "movement" },
                { id: 4, name: "基础阵法", icon: "🔮", level: 1, type: "formation" },
                { id: 5, name: "基础掌法", icon: "👐", level: 2, type: "palm" },
                { id: 6, name: "火焰术", icon: "🔥", level: 3, type: "fire" },
                { id: 7, name: "水系功法", icon: "🌊", level: 2, type: "water" },
                { id: 8, name: "金刚功", icon: "💎", level: 1, type: "defense" },
                { id: 9, name: "毒术", icon: "☠️", level: 1, type: "poison" }
            ]
        };

        // 融合配方库（隐藏的，玩家需要探索发现）
        const hiddenRecipes = {
            "sword,formation": {
                result: { name: "剑阵术", icon: "⚔️🔮", level: 1, type: "combo" },
                successRate: 0.6,
                requiredLevel: 3
            },
            "internal,movement": {
                result: { name: "凌空虚渡", icon: "☯️🕊️", level: 1, type: "combo" },
                successRate: 0.5,
                requiredLevel: 4
            },
            "fire,sword": {
                result: { name: "烈焰剑法", icon: "🔥⚔️", level: 1, type: "combo" },
                successRate: 0.7,
                requiredLevel: 3
            },
            "water,fire": {
                result: { name: "水火既济", icon: "🌊🔥", level: 1, type: "combo" },
                successRate: 0.2,
                requiredLevel: 5
            },
            "palm,internal": {
                result: { name: "太极神掌", icon: "👐☯️", level: 1, type: "combo" },
                successRate: 0.6,
                requiredLevel: 3
            },
            "poison,water": {
                result: { name: "碧海潮生", icon: "☠️🌊", level: 1, type: "combo" },
                successRate: 0.4,
                requiredLevel: 3
            }
        };

        // 初始化游戏
        function initGame() {
            renderSkills();
            updateStats();
        }

        // 渲染技能库存
        function renderSkills() {
            const grid = document.getElementById('skillGrid');
            grid.innerHTML = '';
            
            gameState.skills.forEach(skill => {
                const skillElement = document.createElement('div');
                skillElement.className = 'skill-item';
                skillElement.onclick = () => selectSkill(skill);
                skillElement.innerHTML = `
                    <div class="skill-icon">${skill.icon}</div>
                    <div class="skill-name">${skill.name}</div>
                    <div class="skill-level">${skill.level}</div>
                `;
                grid.appendChild(skillElement);
            });
        }

        // 选择技能
        function selectSkill(skill) {
            if (gameState.selectedSkills[0] === null) {
                gameState.selectedSkills[0] = skill;
                updateFusionSlot(1, skill);
            } else if (gameState.selectedSkills[1] === null && gameState.selectedSkills[0].id !== skill.id) {
                gameState.selectedSkills[1] = skill;
                updateFusionSlot(2, skill);
            } else {
                // 重新选择
                gameState.selectedSkills = [skill, null];
                updateFusionSlot(1, skill);
                clearSlot(2);
            }
            
            updateFusionButton();
            calculateSuccessRate();
        }

        // 更新融合槽
        function updateFusionSlot(slotNumber, skill) {
            const slot = document.getElementById(`slot${slotNumber}`);
            slot.className = 'fusion-slot has-skill';
            slot.innerHTML = `
                <div class="skill-icon" style="font-size: 36px;">${skill.icon}</div>
                <div style="font-size: 10px; color: #ccc;">${skill.name}</div>
                <div style="font-size: 8px; color: #d4af37;">LV${skill.level}</div>
            `;
        }

        // 清空融合槽
        function clearSlot(slotNumber) {
            if (slotNumber === 1) {
                gameState.selectedSkills[0] = null;
                document.getElementById('slot1').className = 'fusion-slot';
                document.getElementById('slot1').innerHTML = '<div>拖拽技能至此</div>';
            } else if (slotNumber === 2) {
                gameState.selectedSkills[1] = null;
                document.getElementById('slot2').className = 'fusion-slot';
                document.getElementById('slot2').innerHTML = '<div>拖拽技能至此</div>';
            }
            
            // 清空结果槽
            const resultSlot = document.getElementById('resultSlot');
            resultSlot.innerHTML = '<div>融合结果</div>';
            
            updateFusionButton();
            calculateSuccessRate();
        }

        // 更新融合按钮状态
        function updateFusionButton() {
            const button = document.getElementById('fuseButton');
            const canFuse = gameState.selectedSkills[0] && gameState.selectedSkills[1];
            button.disabled = !canFuse;
        }

        // 计算成功率
        function calculateSuccessRate() {
            const successRateElement = document.getElementById('successRate');
            
            if (!gameState.selectedSkills[0] || !gameState.selectedSkills[1]) {
                successRateElement.textContent = '--';
                return;
            }

            const skill1 = gameState.selectedSkills[0];
            const skill2 = gameState.selectedSkills[1];
            const recipeKey = [skill1.type, skill2.type].sort().join(',');
            
            let baseRate = 0.3; // 基础成功率
            
            if (hiddenRecipes[recipeKey]) {
                baseRate = hiddenRecipes[recipeKey].successRate;
            }
            
            // 悟性加成
            const comprehensionBonus = gameState.comprehension / 100 * 0.3;
            
            // 技能等级加成
            const levelBonus = (skill1.level + skill2.level) / 20;
            
            // 兼容性判断
            let compatibilityBonus = 0;
            if (isCompatible(skill1.type, skill2.type)) {
                compatibilityBonus = 0.2;
            } else if (isConflicting(skill1.type, skill2.type)) {
                compatibilityBonus = -0.3;
            }
            
            const finalRate = Math.max(0.05, Math.min(0.95, baseRate + comprehensionBonus + levelBonus + compatibilityBonus));
            
            successRateElement.textContent = Math.round(finalRate * 100) + '%';
        }

        // 判断技能兼容性
        function isCompatible(type1, type2) {
            const compatiblePairs = [
                ['sword', 'formation'],
                ['internal', 'movement'],
                ['fire', 'sword'],
                ['palm', 'internal'],
                ['water', 'poison']
            ];
            
            return compatiblePairs.some(pair => 
                (pair[0] === type1 && pair[1] === type2) || 
                (pair[0] === type2 && pair[1] === type1)
            );
        }

        // 判断技能冲突
        function isConflicting(type1, type2) {
            const conflictingPairs = [
                ['fire', 'water'],
                ['poison', 'defense']
            ];
            
            return conflictingPairs.some(pair => 
                (pair[0] === type1 && pair[1] === type2) || 
                (pair[0] === type2 && pair[1] === type1)
            );
        }

        // 尝试融合
        function attemptFusion() {
            if (!gameState.selectedSkills[0] || !gameState.selectedSkills[1]) return;

            const skill1 = gameState.selectedSkills[0];
            const skill2 = gameState.selectedSkills[1];
            const recipeKey = [skill1.type, skill2.type].sort().join(',');
            
            // 计算最终成功率
            const successRateText = document.getElementById('successRate').textContent;
            const successRate = parseFloat(successRateText) / 100;
            
            const random = Math.random();
            const isSuccess = random < successRate;
            
            // 播放动画
            const resultSlot = document.getElementById('resultSlot');
            resultSlot.classList.add('fusion-animation');
            
            setTimeout(() => {
                resultSlot.classList.remove('fusion-animation');
                
                if (isSuccess) {
                    handleSuccessfulFusion(recipeKey, skill1, skill2);
                } else {
                    handleFailedFusion(successRate);
                }
            }, 1500);
        }

        // 处理成功融合
        function handleSuccessfulFusion(recipeKey, skill1, skill2) {
            let newSkill;
            
            if (hiddenRecipes[recipeKey]) {
                newSkill = { ...hiddenRecipes[recipeKey].result, id: Date.now() };
                addMessage(`🎉 融合成功！发现了新技能：${newSkill.name}`, 'success');
                
                // 记录发现
                if (!gameState.discoveredRecipes.includes(recipeKey)) {
                    gameState.discoveredRecipes.push(recipeKey);
                    addDiscovery(`${skill1.name} + ${skill2.name} = ${newSkill.name}`);
                }
            } else {
                // 未知组合，创建通用技能
                newSkill = {
                    id: Date.now(),
                    name: `${skill1.name}${skill2.name}`,
                    icon: `${skill1.icon}${skill2.icon}`,
                    level: 1,
                    type: 'combo'
                };
                addMessage(`✨ 意外发现！创造了全新技能：${newSkill.name}`, 'success');
                addDiscovery(`${skill1.name} + ${skill2.name} = ${newSkill.name} (未知组合!)`);
            }
            
            // 显示结果
            updateResultSlot(newSkill);
            
            // 添加到技能库
            gameState.skills.push(newSkill);
            renderSkills();
            
            // 获得修为
            gainExperience(100);
        }

        // 处理失败融合
        function handleFailedFusion(successRate) {
            const failureLevel = Math.random();
            let expLoss = 0;
            let message = '';
            
            if (failureLevel < 0.3) {
                expLoss = Math.floor(gameState.experience * 0.1);
                message = `💥 融合失败！内力逆行，损失修为 ${expLoss} 点`;
            } else if (failureLevel < 0.6) {
                expLoss = Math.floor(gameState.experience * 0.2);
                message = `⚡ 融合失败！经脉受损，损失修为 ${expLoss} 点`;
            } else {
                expLoss = Math.floor(gameState.experience * 0.05);
                message = `🌀 融合失败！轻微反噬，损失修为 ${expLoss} 点`;
            }
            
            addMessage(message, 'failure');
            loseExperience(expLoss);
            
            // 显示失败结果
            const resultSlot = document.getElementById('resultSlot');
            resultSlot.innerHTML = `
                <div style="font-size: 36px;">💥</div>
                <div style="font-size: 12px; color: #f44336;">融合失败</div>
            `;
        }

        // 更新结果槽
        function updateResultSlot(skill) {
            const resultSlot = document.getElementById('resultSlot');
            resultSlot.innerHTML = `
                <div class="skill-icon" style="font-size: 36px;">${skill.icon}</div>
                <div style="font-size: 10px; color: #4CAF50;">${skill.name}</div>
                <div style="font-size: 8px; color: #d4af37;">LV${skill.level}</div>
            `;
        }

        // 添加消息
        function addMessage(text, type = 'info') {
            const messageArea = document.getElementById('messageArea');
            const message = document.createElement('div');
            message.className = `message ${type}`;
            message.textContent = text;
            
            messageArea.innerHTML = '';
            messageArea.appendChild(message);
        }

        // 添加发现记录
        function addDiscovery(text) {
            const log = document.getElementById('discoveryLog');
            const item = document.createElement('div');
            item.className = 'log-item';
            item.textContent = `🔍 ${text}`;
            
            if (log.children[0].textContent.includes('等待你的第一次发现')) {
                log.innerHTML = '';
            }
            
            log.insertBefore(item, log.firstChild);
        }

        // 获得修为
        function gainExperience(amount) {
            gameState.experience += amount;
            updateStats();
        }

        // 失去修为
        function loseExperience(amount) {
            gameState.experience = Math.max(0, gameState.experience - amount);
            updateStats();
        }

        // 更新状态显示
        function updateStats() {
            document.getElementById('experience').textContent = `${gameState.experience}/${gameState.maxExperience}`;
            
            const expPercentage = (gameState.experience / gameState.maxExperience) * 100;
            document.getElementById('expBar').style.width = expPercentage + '%';
            
            // 检查是否需要升级境界
            if (gameState.experience >= gameState.maxExperience) {
                levelUp();
            }
        }

        // 境界提升
        function levelUp() {
            const realms = ["筑基期", "开光期", "融合期", "心动期", "灵寂期", "结丹期"];
            const currentIndex = realms.indexOf(gameState.realm);
            
            if (currentIndex < realms.length - 1) {
                gameState.realm = realms[currentIndex + 1];
                gameState.experience = 0;
                gameState.maxExperience = Math.floor(gameState.maxExperience * 1.5);
                gameState.comprehension += 10;
                
                document.getElementById('realm').textContent = gameState.realm;
                document.getElementById('comprehension').textContent = gameState.comprehension;
                
                addMessage(`🎊 恭喜！境界提升至${gameState.realm}！悟性+10`, 'success');
            }
        }

        // 启动游戏
        initGame();
    </script>
<script>window.parent.postMessage({ action: "ready" }, "*"); 
 
window.console = new Proxy(console, {
  get(target, prop) {
    if (['log', 'warn', 'error'].includes(prop)) {
      return new Proxy(target[prop], {
        apply(fn, thisArg, args) {
          fn.apply(thisArg, args);
          window.parent.postMessage({ action: 'console', 
            type: prop, 
            args: args.map((arg) => {
              try {
                return JSON.stringify(arg).replace(/^["']|["']$/g, '');
              } catch (e) {
                return arg;
              }
            }) 
          }, '*');
        }
      });
    }
    return target[prop];
  }
});
</script></body>
</html>
